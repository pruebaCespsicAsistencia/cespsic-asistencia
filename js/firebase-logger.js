// ========================================================================================================
// üìä SISTEMA DE LOGS Y AUDITOR√çA PARA FIREBASE - CESPSIC
// ========================================================================================================
// Este archivo replica la funcionalidad de intentos fallidos, duplicados y auditor√≠a que exist√≠a
// en el sistema anterior de Google Sheets, pero ahora usando Firebase Firestore
//
// Colecciones que maneja:
// - intentos_recibidos: Todos los intentos que llegan
// - intentos_fallidos: Intentos que fallaron por alg√∫n error
// - intentos_duplicados: Intentos de registros duplicados
// - auditoria: Log completo de todas las operaciones

import { 
  db, 
  collection, 
  addDoc, 
  getDocs,
  query, 
  where,
  serverTimestamp 
} from './firebase-config.js';

// ========================================================================================================
// üîç FUNCI√ìN: Verificar Duplicados
// ========================================================================================================
export async function verificarDuplicado(registroID, email) {
  try {
    console.log('üîç Verificando duplicados para:', registroID);
    
    const q = query(
      collection(db, 'asistencias'),
      where('registro_id', '==', registroID)
    );
    
    const querySnapshot = await getDocs(q);
    
    if (!querySnapshot.empty) {
      const registroExistente = querySnapshot.docs[0].data();
      console.warn('‚ö†Ô∏è Registro duplicado encontrado:', registroID);
      console.warn('   Fecha original:', registroExistente.fecha_creacion);
      
      return {
        esDuplicado: true,
        registroExistente: registroExistente
      };
    }
    
    console.log('‚úÖ No hay duplicados');
    return { esDuplicado: false };
    
  } catch (error) {
    console.error('‚ùå Error verificando duplicados:', error);
    // No lanzar error, continuar con el guardado
    return { esDuplicado: false };
  }
}

// ========================================================================================================
// üìù FUNCI√ìN: Registrar Intento Recibido
// ========================================================================================================
export async function registrarIntentoRecibido(datos) {
  try {
    console.log('üìù Registrando intento recibido...');
    
    const intento = {
      timestamp: serverTimestamp(),
      registro_id: datos.registro_id || 'no_generado',
      email: datos.email || 'sin_email',
      nombre: datos.nombre_completo || 'sin_nombre',
      modalidad: datos.modalidad || 'sin_modalidad',
      tiene_coordenadas: datos.ubicacion ? true : false,
      tiene_user_id: datos.google_user_id ? true : false,
      device_type: datos.device_type || 'Unknown',
      total_campos: Object.keys(datos).length,
      estado: 'RECIBIDO',
      fecha_creacion: new Date().toISOString()
    };
    
    await addDoc(collection(db, 'intentos_recibidos'), intento);
    console.log('‚úÖ Intento recibido registrado en Firebase');
    
  } catch (error) {
    console.error('‚ùå Error registrando intento recibido:', error);
    // No lanzar error para no interrumpir el flujo principal
  }
}

// ========================================================================================================
// ‚ùå FUNCI√ìN: Registrar Intento Fallido
// ========================================================================================================
export async function registrarIntentoFallido(datos, error) {
  try {
    console.log('‚ùå Registrando intento fallido...');
    
    const intentoFallido = {
      timestamp: serverTimestamp(),
      registro_id: datos.registro_id || 'no_generado',
      email: datos.email || 'SIN_EMAIL',
      nombre: datos.nombre_completo || 'sin_nombre',
      modalidad: datos.modalidad || 'VAC√çO',
      tipo_registro: datos.tipo_registro || 'sin_tipo',
      
      // Detalles del error
      error_mensaje: error.message || error.toString(),
      error_tipo: error.name || 'Error General',
      error_stack: error.stack ? error.stack.substring(0, 500) : '', // Limitar tama√±o
      
      // Datos adicionales
      ubicacion: datos.ubicacion?.lugar || 'sin_ubicacion',
      precision_metros: datos.ubicacion?.precision_metros || 0,
      device_type: datos.device_type || 'Unknown',
      total_campos: Object.keys(datos).length,
      
      fecha_creacion: new Date().toISOString()
    };
    
    await addDoc(collection(db, 'intentos_fallidos'), intentoFallido);
    console.log('‚úÖ Intento fallido registrado en Firebase');
    
  } catch (logError) {
    console.error('‚ùå Error registrando intento fallido:', logError);
    // No lanzar error para no interrumpir el flujo
  }
}

// ========================================================================================================
// üîÑ FUNCI√ìN: Registrar Intento Duplicado
// ========================================================================================================
export async function registrarIntentoDuplicado(datos, registroOriginal) {
  try {
    console.log('üîÑ Registrando intento duplicado...');
    
    const duplicado = {
      timestamp: serverTimestamp(),
      registro_id: datos.registro_id || 'no_generado',
      email: datos.email || 'sin_email',
      tipo_registro: datos.tipo_registro || 'sin_tipo',
      device_type: datos.device_type || 'Unknown',
      
      // Informaci√≥n del registro original
      registro_original_id: registroOriginal.registro_id || 'desconocido',
      registro_original_fecha: registroOriginal.fecha_creacion || 'desconocida',
      
      nota: 'Intento de registro duplicado detectado y rechazado',
      fecha_creacion: new Date().toISOString()
    };
    
    await addDoc(collection(db, 'intentos_duplicados'), duplicado);
    console.log('‚úÖ Intento duplicado registrado en Firebase');
    
  } catch (error) {
    console.error('‚ùå Error registrando duplicado:', error);
    // No lanzar error
  }
}

// ========================================================================================================
// üìã FUNCI√ìN: Registrar Auditor√≠a
// ========================================================================================================
export async function registrarAuditoria(datos, exitoso) {
  try {
    console.log('üìã Registrando auditor√≠a...');
    
    const auditoria = {
      timestamp: serverTimestamp(),
      registro_id: datos.registro_id || 'no_generado',
      email: datos.email || 'sin_email',
      nombre: datos.nombre_completo || 'sin_nombre',
      tipo_registro: datos.tipo_registro || 'sin_tipo',
      modalidad: datos.modalidad || 'sin_modalidad',
      ubicacion: datos.ubicacion?.lugar || 'sin_ubicacion',
      precision_metros: datos.ubicacion?.precision_metros || 0,
      device_type: datos.device_type || 'Unknown',
      exitoso: exitoso,
      version_html: datos.version || '2.0',
      fecha_creacion: new Date().toISOString()
    };
    
    await addDoc(collection(db, 'auditoria'), auditoria);
    console.log(`‚úÖ Auditor√≠a registrada: ${exitoso ? 'EXITOSO' : 'FALLIDO'}`);
    
  } catch (error) {
    console.error('‚ùå Error registrando auditor√≠a:', error);
    // No lanzar error
  }
}

// ========================================================================================================
// üéØ FUNCI√ìN PRINCIPAL: Guardar con Validaciones y Logs Completos
// ========================================================================================================
export async function guardarAsistenciaConLogs(asistenciaData) {
  let registradoExitosamente = false;
  
  try {
    console.log('\n' + '='.repeat(70));
    console.log('üìä GUARDANDO CON SISTEMA DE LOGS COMPLETO');
    console.log('='.repeat(70));
    console.log('üìã Registro ID:', asistenciaData.registro_id);
    console.log('üë§ Usuario:', asistenciaData.email);
    console.log('üìç Ubicaci√≥n:', asistenciaData.ubicacion?.lugar);
    
    // 1Ô∏è‚É£ REGISTRAR INTENTO RECIBIDO
    console.log('\n1Ô∏è‚É£ Registrando intento recibido...');
    await registrarIntentoRecibido(asistenciaData);
    
    // 2Ô∏è‚É£ VERIFICAR DUPLICADOS
    console.log('\n2Ô∏è‚É£ Verificando duplicados...');
    const resultadoDuplicado = await verificarDuplicado(
      asistenciaData.registro_id, 
      asistenciaData.email
    );
    
    if (resultadoDuplicado.esDuplicado) {
      console.warn('\n‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è REGISTRO DUPLICADO DETECTADO');
      
      // Registrar el intento duplicado
      await registrarIntentoDuplicado(asistenciaData, resultadoDuplicado.registroExistente);
      
      // Registrar auditor√≠a fallida
      await registrarAuditoria(asistenciaData, false);
      
      // Lanzar error para mostrar al usuario
      throw new Error(
        `‚ùå REGISTRO DUPLICADO\n\n` +
        `Este registro ya existe en el sistema:\n\n` +
        `‚Ä¢ Registro ID: ${asistenciaData.registro_id}\n` +
        `‚Ä¢ Fecha original: ${new Date(resultadoDuplicado.registroExistente.fecha_creacion).toLocaleString('es-MX')}\n` +
        `‚Ä¢ Usuario: ${resultadoDuplicado.registroExistente.email}\n\n` +
        `No se puede duplicar el mismo registro.\n` +
        `Si cree que esto es un error, contacte al administrador.`
      );
    }
    
    // 3Ô∏è‚É£ GUARDAR EN FIRESTORE
    console.log('\n3Ô∏è‚É£ Guardando asistencia en Firestore...');
    const docRef = await addDoc(collection(db, 'asistencias'), asistenciaData);
    console.log('‚úÖ Asistencia guardada exitosamente');
    console.log('üÜî Firestore Document ID:', docRef.id);
    
    registradoExitosamente = true;
    
    // 4Ô∏è‚É£ REGISTRAR AUDITOR√çA EXITOSA
    console.log('\n4Ô∏è‚É£ Registrando auditor√≠a exitosa...');
    await registrarAuditoria(asistenciaData, true);
    
    console.log('\n' + '='.repeat(70));
    console.log('‚úÖ‚úÖ‚úÖ PROCESO COMPLETADO EXITOSAMENTE');
    console.log('='.repeat(70));
    
    return {
      success: true,
      docId: docRef.id,
      registroId: asistenciaData.registro_id,
      message: 'Asistencia guardada correctamente con logs completos'
    };
    
  } catch (error) {
    console.error('\n' + '='.repeat(70));
    console.error('‚ùå‚ùå‚ùå ERROR EN PROCESO DE GUARDADO');
    console.error('='.repeat(70));
    console.error('Error:', error.message);
    console.error('Stack:', error.stack);
    
    // 5Ô∏è‚É£ REGISTRAR INTENTO FALLIDO (solo si no fue por duplicado)
    if (!registradoExitosamente && !error.message.includes('DUPLICADO')) {
      console.log('\n5Ô∏è‚É£ Registrando intento fallido...');
      await registrarIntentoFallido(asistenciaData, error);
      await registrarAuditoria(asistenciaData, false);
    }
    
    console.error('='.repeat(70));
    
    // Re-lanzar el error para que lo maneje handleSubmit
    throw error;
  }
}

// ========================================================================================================
// üìä FUNCI√ìN AUXILIAR: Obtener Estad√≠sticas de Logs
// ========================================================================================================
export async function obtenerEstadisticasLogs(email, fechaInicio, fechaFin) {
  try {
    console.log('üìä Obteniendo estad√≠sticas de logs...');
    
    const estadisticas = {
      asistencias: 0,
      intentos_recibidos: 0,
      intentos_fallidos: 0,
      intentos_duplicados: 0,
      tasa_exito: 0
    };
    
    // Contar registros en cada colecci√≥n
    const colecciones = [
      'asistencias',
      'intentos_recibidos', 
      'intentos_fallidos',
      'intentos_duplicados'
    ];
    
    for (const coleccion of colecciones) {
      const q = query(
        collection(db, coleccion),
        where('email', '==', email)
      );
      
      const snapshot = await getDocs(q);
      estadisticas[coleccion] = snapshot.size;
    }
    
    // Calcular tasa de √©xito
    if (estadisticas.intentos_recibidos > 0) {
      estadisticas.tasa_exito = (
        (estadisticas.asistencias / estadisticas.intentos_recibidos) * 100
      ).toFixed(2);
    }
    
    console.log('‚úÖ Estad√≠sticas obtenidas:', estadisticas);
    return estadisticas;
    
  } catch (error) {
    console.error('‚ùå Error obteniendo estad√≠sticas:', error);
    return null;
  }
}

// ========================================================================================================
// üîç FUNCI√ìN AUXILIAR: Buscar Registro por ID
// ========================================================================================================
export async function buscarRegistroPorID(registroID) {
  try {
    const q = query(
      collection(db, 'asistencias'),
      where('registro_id', '==', registroID)
    );
    
    const snapshot = await getDocs(q);
    
    if (snapshot.empty) {
      return null;
    }
    
    return {
      id: snapshot.docs[0].id,
      data: snapshot.docs[0].data()
    };
    
  } catch (error) {
    console.error('‚ùå Error buscando registro:', error);
    return null;
  }
}

// ========================================================================================================
// üìù LOG FINAL
// ========================================================================================================
console.log('‚úÖ firebase-logger.js cargado correctamente');
console.log('üìä Sistema de logs y auditor√≠a Firebase: ACTIVO');
console.log('üîç Funciones disponibles:');
console.log('   - verificarDuplicado()');
console.log('   - registrarIntentoRecibido()');
console.log('   - registrarIntentoFallido()');
console.log('   - registrarIntentoDuplicado()');
console.log('   - registrarAuditoria()');
console.log('   - guardarAsistenciaConLogs() ‚Üê PRINCIPAL');
console.log('   - obtenerEstadisticasLogs()');
console.log('   - buscarRegistroPorID()');
